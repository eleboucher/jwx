{{ define "ext/object/header" }}
{{- $objectName := .Name }}
{{- if $comment := $.Comment }}
{{ comment $comment $ }}
{{- end }}
type {{ $.InterfaceName }} interface {
  Key

  // FromRaw initializes the key internals from a Go native key type of {{ $.NativeKeyType.GetPointerType }}
  FromRaw({{ $.NativeKeyType.GetPointerType }}) error

  {{- range $i, $field := .Fields }}
  {{- if $field.GetExtra "common" }}{{ continue }}{{ end }}
  {{- if $comment := $field.GetComment }}
  {{ comment $comment $field }}
  {{- end }}
  {{ $field.GetName }}() {{ $field.GetType.GetApparentType }}
  {{- end }}
}

func new{{ $.InterfaceName }}() *{{ $.Name }} {
  return &{{ $.Name }}{}
}

func (v *{{ $objectName }}) DecodeCtx() DecodeCtx {
  v.mu.RLock()
  defer v.mu.RUnlock()
  return v.dc
}

func (v *{{ $objectName }}) SetDecodeCtx(dc DecodeCtx) {
  v.mu.Lock()
  defer v.mu.Unlock()
  v.dc = dc
}

func (v *{{ $objectName }}) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
  if dc := v.dc; dc != nil {
    if localReg := dc.Registry(); localReg != nil {
      decoded, err := localReg.Decode(dec, name)
      if err == nil {
        if err := blackmagic.AssignIfCompatible(dst, decoded); err != nil {
          return fmt.Errorf(`failed to assign decoded value for %q: %w`, name, err)
        }
        return nil
      }
    }
  }

  decoded, err := registry.Decode(dec, name)
  if err == nil {
    if err := blackmagic.AssignIfCompatible(dst, decoded); err != nil {
      return fmt.Errorf(`failed to assign decoded value for %q: %w`, name, err)
    }
    return nil
  }

  return fmt.Errorf(`failed to decode field %q: %w`, name, err)
}
{{ end }}
