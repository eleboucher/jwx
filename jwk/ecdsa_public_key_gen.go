// Generated by "sketch" utility. DO NOT EDIT
package jwk

import (
	"bytes"
	"crypto/ecdsa"
	"fmt"
	"sort"
	"sync"

	"github.com/lestrrat-go/blackmagic"
	"github.com/lestrrat-go/byteslice"
	"github.com/lestrrat-go/jwx/v2/cert"
	"github.com/lestrrat-go/jwx/v2/internal/json"
	"github.com/lestrrat-go/jwx/v2/jwa"
)

type ECDSAPublicKey interface {
	Key

	// FromRaw initializes the key internals from a Go native key type of *ecdsa.PublicKey
	FromRaw(*ecdsa.PublicKey) error
	Algorithm() jwa.KeyAlgorithm
	Crv() jwa.EllipticCurveAlgorithm
	X() []byte
	Y() []byte
	DecodeCtx() DecodeCtx
}

func newECDSAPublicKey() *ecdsaPublicKey {
	return &ecdsaPublicKey{}
}

func (v *ecdsaPublicKey) DecodeCtx() DecodeCtx {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.dc
}

func (v *ecdsaPublicKey) SetDecodeCtx(dc DecodeCtx) {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.dc = dc
}

func (v *ecdsaPublicKey) decodeExtraField(name string, dec *json.Decoder, dst interface{}) error {
	if dc := v.dc; dc != nil {
		if localReg := dc.Registry(); localReg != nil {
			decoded, err := localReg.Decode(dec, name)
			if err == nil {
				if err := blackmagic.AssignIfCompatible(dst, decoded); err != nil {
					return fmt.Errorf(`failed to assign decoded value for %q: %w`, name, err)
				}
				return nil
			}
		}
	}

	decoded, err := registry.Decode(dec, name)
	if err == nil {
		if err := blackmagic.AssignIfCompatible(dst, decoded); err != nil {
			return fmt.Errorf(`failed to assign decoded value for %q: %w`, name, err)
		}
		return nil
	}

	return fmt.Errorf(`failed to decode field %q: %w`, name, err)
}

type ecdsaPublicKey struct {
	mu                     sync.RWMutex
	algorithm              *jwa.KeyAlgorithm
	keyID                  *string
	keyOps                 *KeyOperationList
	keyUsage               *KeyUsageType
	x509CertChain          *cert.Chain
	x509CertThumbprint     *string
	x509CertThumbprintS256 *string
	x509URL                *string
	crv                    *jwa.EllipticCurveAlgorithm
	x                      *byteslice.Type
	y                      *byteslice.Type
	dc                     DecodeCtx
	extra                  map[string]interface{}
}

// Get retrieves the value associated with a key
func (v *ecdsaPublicKey) Get(key string, dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.getNoLock(key, dst, false)
}

// getNoLock is a utility method that is called from Get, MarshalJSON, etc, but
// it can be used from user-supplied code. Unlike Get, it avoids locking for
// each call, so the user needs to explicitly lock the object before using,
// but otherwise should be faster than sing Get directly
func (v *ecdsaPublicKey) getNoLock(key string, dst interface{}, raw bool) error {
	switch key {
	case AlgorithmKey:
		if val := v.algorithm; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case KeyIDKey:
		if val := v.keyID; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case KeyOpsKey:
		if val := v.keyOps; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case KeyTypeKey:
		return blackmagic.AssignIfCompatible(dst, v.KeyType())
	case KeyUsageKey:
		if val := v.keyUsage; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, val)
			}
			return blackmagic.AssignIfCompatible(dst, val.Get())
		}
	case X509CertChainKey:
		if val := v.x509CertChain; val != nil {
			return blackmagic.AssignIfCompatible(dst, val)
		}
	case X509CertThumbprintKey:
		if val := v.x509CertThumbprint; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case X509CertThumbprintS256Key:
		if val := v.x509CertThumbprintS256; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case X509URLKey:
		if val := v.x509URL; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ECDSACrvKey:
		if val := v.crv; val != nil {
			return blackmagic.AssignIfCompatible(dst, *val)
		}
	case ECDSAXKey:
		if val := v.x; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, val)
			}
			return blackmagic.AssignIfCompatible(dst, val.Bytes())
		}
	case ECDSAYKey:
		if val := v.y; val != nil {
			if raw {
				return blackmagic.AssignIfCompatible(dst, val)
			}
			return blackmagic.AssignIfCompatible(dst, val.Bytes())
		}
	default:
		if v.extra != nil {
			val, ok := v.extra[key]
			if ok {
				return blackmagic.AssignIfCompatible(dst, val)
			}
		}
	}
	return fmt.Errorf(`no such key %q`, key)
}

// Set sets the value of the specified field. The name must be a JSON
// field name, not the Go name
func (v *ecdsaPublicKey) Set(key string, value interface{}) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	switch key {
	case AlgorithmKey:
		object, err := jwa.KeyAlgorithmFrom(value)
		if err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.algorithm = &object
	case KeyIDKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field kid, got %T`, value)
		}
		v.keyID = &converted
	case KeyOpsKey:
		converted, ok := value.(KeyOperationList)
		if !ok {
			return fmt.Errorf(`expected value of type KeyOperationList for field key_ops, got %T`, value)
		}
		v.keyOps = &converted
	case KeyTypeKey:
		// constant value is no-op on Set
		return nil
	case KeyUsageKey:
		var object KeyUsageType
		if err := object.Accept(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.keyUsage = &object
	case X509CertChainKey:
		converted, ok := value.(*cert.Chain)
		if !ok {
			return fmt.Errorf(`expected value of type *cert.Chain for field x5c, got %T`, value)
		}
		v.x509CertChain = converted
	case X509CertThumbprintKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field x5t, got %T`, value)
		}
		v.x509CertThumbprint = &converted
	case X509CertThumbprintS256Key:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field x5t#S256, got %T`, value)
		}
		v.x509CertThumbprintS256 = &converted
	case X509URLKey:
		converted, ok := value.(string)
		if !ok {
			return fmt.Errorf(`expected value of type string for field x5u, got %T`, value)
		}
		v.x509URL = &converted
	case ECDSACrvKey:
		var object jwa.EllipticCurveAlgorithm
		if err := object.Accept(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.crv = &object
	case ECDSAXKey:
		var object byteslice.Type
		if err := object.AcceptValue(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.x = &object
	case ECDSAYKey:
		var object byteslice.Type
		if err := object.AcceptValue(value); err != nil {
			return fmt.Errorf(`failed to accept value: %w`, err)
		}
		v.y = &object
	default:
		if v.extra == nil {
			v.extra = make(map[string]interface{})
		}
		v.extra[key] = value
	}
	return nil
}

// Has returns true if the field specified by the argument has been populated.
// The field name must be the JSON field name, not the Go-structure's field name.
func (v *ecdsaPublicKey) Has(name string) bool {
	switch name {
	case AlgorithmKey:
		return v.algorithm != nil
	case KeyIDKey:
		return v.keyID != nil
	case KeyOpsKey:
		return v.keyOps != nil
	case KeyTypeKey:
		return true
	case KeyUsageKey:
		return v.keyUsage != nil
	case X509CertChainKey:
		return v.x509CertChain != nil
	case X509CertThumbprintKey:
		return v.x509CertThumbprint != nil
	case X509CertThumbprintS256Key:
		return v.x509CertThumbprintS256 != nil
	case X509URLKey:
		return v.x509URL != nil
	case ECDSACrvKey:
		return v.crv != nil
	case ECDSAXKey:
		return v.x != nil
	case ECDSAYKey:
		return v.y != nil
	default:
		if v.extra != nil {
			if _, ok := v.extra[name]; ok {
				return true
			}
		}
		return false
	}
}

// Keys returns a slice of string comprising of JSON field names whose values
// are present in the object.
func (v *ecdsaPublicKey) Keys() []string {
	keys := make([]string, 0, 13)
	if v.algorithm != nil {
		keys = append(keys, AlgorithmKey)
	}
	if v.keyID != nil {
		keys = append(keys, KeyIDKey)
	}
	if v.keyOps != nil {
		keys = append(keys, KeyOpsKey)
	}
	keys = append(keys, KeyTypeKey)
	if v.keyUsage != nil {
		keys = append(keys, KeyUsageKey)
	}
	if v.x509CertChain != nil {
		keys = append(keys, X509CertChainKey)
	}
	if v.x509CertThumbprint != nil {
		keys = append(keys, X509CertThumbprintKey)
	}
	if v.x509CertThumbprintS256 != nil {
		keys = append(keys, X509CertThumbprintS256Key)
	}
	if v.x509URL != nil {
		keys = append(keys, X509URLKey)
	}
	if v.crv != nil {
		keys = append(keys, ECDSACrvKey)
	}
	if v.x != nil {
		keys = append(keys, ECDSAXKey)
	}
	if v.y != nil {
		keys = append(keys, ECDSAYKey)
	}

	if len(v.extra) > 0 {
		for k := range v.extra {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)
	return keys
}

// HasAlgorithm returns true if the field `alg` has been populated
func (v *ecdsaPublicKey) HasAlgorithm() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.algorithm != nil
}

// HasKeyID returns true if the field `kid` has been populated
func (v *ecdsaPublicKey) HasKeyID() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.keyID != nil
}

// HasKeyOps returns true if the field `key_ops` has been populated
func (v *ecdsaPublicKey) HasKeyOps() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.keyOps != nil
}

// HasKeyType returns true if the field `kty` has been populated
func (v *ecdsaPublicKey) HasKeyType() bool {
	return true
}

// HasKeyUsage returns true if the field `use` has been populated
func (v *ecdsaPublicKey) HasKeyUsage() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.keyUsage != nil
}

// HasX509CertChain returns true if the field `x5c` has been populated
func (v *ecdsaPublicKey) HasX509CertChain() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x509CertChain != nil
}

// HasX509CertThumbprint returns true if the field `x5t` has been populated
func (v *ecdsaPublicKey) HasX509CertThumbprint() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x509CertThumbprint != nil
}

// HasX509CertThumbprintS256 returns true if the field `x5t#S256` has been populated
func (v *ecdsaPublicKey) HasX509CertThumbprintS256() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x509CertThumbprintS256 != nil
}

// HasX509URL returns true if the field `x5u` has been populated
func (v *ecdsaPublicKey) HasX509URL() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x509URL != nil
}

// HasCrv returns true if the field `crv` has been populated
func (v *ecdsaPublicKey) HasCrv() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.crv != nil
}

// HasX returns true if the field `x` has been populated
func (v *ecdsaPublicKey) HasX() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.x != nil
}

// HasY returns true if the field `y` has been populated
func (v *ecdsaPublicKey) HasY() bool {
	v.mu.RLock()
	defer v.mu.RUnlock()
	return v.y != nil
}

func (v *ecdsaPublicKey) Algorithm() jwa.KeyAlgorithm {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.algorithm; val != nil {
		return *val
	}
	return jwa.UnknownKeyAlgorithm("")
}

func (v *ecdsaPublicKey) KeyID() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.keyID; val != nil {
		return *val
	}
	return ""
}

func (v *ecdsaPublicKey) KeyOps() KeyOperationList {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.keyOps; val != nil {
		return *val
	}
	return nil
}

func (v *ecdsaPublicKey) KeyType() jwa.KeyType {
	return jwa.EC
}

func (v *ecdsaPublicKey) KeyUsage() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.keyUsage; val != nil {
		return val.Get()
	}
	return ""
}

func (v *ecdsaPublicKey) X509CertChain() *cert.Chain {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x509CertChain; val != nil {
		return val
	}
	return nil
}

func (v *ecdsaPublicKey) X509CertThumbprint() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x509CertThumbprint; val != nil {
		return *val
	}
	return ""
}

func (v *ecdsaPublicKey) X509CertThumbprintS256() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x509CertThumbprintS256; val != nil {
		return *val
	}
	return ""
}

func (v *ecdsaPublicKey) X509URL() string {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x509URL; val != nil {
		return *val
	}
	return ""
}

func (v *ecdsaPublicKey) Crv() jwa.EllipticCurveAlgorithm {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.crv; val != nil {
		return *val
	}
	return jwa.EllipticCurveAlgorithm("")
}

func (v *ecdsaPublicKey) X() []byte {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.x; val != nil {
		return val.Bytes()
	}
	return []byte(nil)
}

func (v *ecdsaPublicKey) Y() []byte {
	v.mu.RLock()
	defer v.mu.RUnlock()
	if val := v.y; val != nil {
		return val.Bytes()
	}
	return []byte(nil)
}

// Remove removes the value associated with a key
func (v *ecdsaPublicKey) Remove(key string) error {
	v.mu.Lock()
	defer v.mu.Unlock()

	switch key {
	case AlgorithmKey:
		v.algorithm = nil
	case KeyIDKey:
		v.keyID = nil
	case KeyOpsKey:
		v.keyOps = nil
	case KeyTypeKey:
		// no-op
	case KeyUsageKey:
		v.keyUsage = nil
	case X509CertChainKey:
		v.x509CertChain = nil
	case X509CertThumbprintKey:
		v.x509CertThumbprint = nil
	case X509CertThumbprintS256Key:
		v.x509CertThumbprintS256 = nil
	case X509URLKey:
		v.x509URL = nil
	case ECDSACrvKey:
		v.crv = nil
	case ECDSAXKey:
		v.x = nil
	case ECDSAYKey:
		v.y = nil
	default:
		delete(v.extra, key)
	}

	return nil
}

func (v *ecdsaPublicKey) Clone(dst interface{}) error {
	v.mu.RLock()
	defer v.mu.RUnlock()

	extra := make(map[string]interface{})
	for key, val := range v.extra {
		extra[key] = val
	}
	return blackmagic.AssignIfCompatible(dst, &ecdsaPublicKey{
		algorithm:              v.algorithm,
		keyID:                  v.keyID,
		keyOps:                 v.keyOps,
		keyUsage:               v.keyUsage,
		x509CertChain:          v.x509CertChain,
		x509CertThumbprint:     v.x509CertThumbprint,
		x509CertThumbprintS256: v.x509CertThumbprintS256,
		x509URL:                v.x509URL,
		crv:                    v.crv,
		x:                      v.x,
		y:                      v.y,
		dc:                     v.dc,
		extra:                  extra,
	})
}

// MarshalJSON serializes ecdsaPublicKey into JSON.
// All pre-declared fields are included as long as a value is
// assigned to them, as well as all extra fields. All of these
// fields are sorted in alphabetical order.
func (v *ecdsaPublicKey) MarshalJSON() ([]byte, error) {
	v.mu.RLock()
	defer v.mu.RUnlock()

	var buf bytes.Buffer
	enc := json.NewEncoder(&buf)
	buf.WriteByte('{')
	for i, k := range v.Keys() {
		var val interface{}
		if err := v.getNoLock(k, &val, true); err != nil {
			return nil, fmt.Errorf(`failed to retrieve value for field %q: %w`, k, err)
		}

		if i > 0 {
			buf.WriteByte(',')
		}
		if err := enc.Encode(k); err != nil {
			return nil, fmt.Errorf(`failed to encode map key name: %w`, err)
		}
		buf.WriteByte(':')
		if err := enc.Encode(val); err != nil {
			return nil, fmt.Errorf(`failed to encode map value for %q: %w`, k, err)
		}
	}
	buf.WriteByte('}')
	return buf.Bytes(), nil
}

// UnmarshalJSON deserializes a piece of JSON data into ecdsaPublicKey.
//
// Pre-defined fields must be deserializable via "encoding/json" to their
// respective Go types, otherwise an error is returned.
//
// Extra fields are stored in a special "extra" storage, which can only
// be accessed via `Get()` and `Set()` methods.
func (v *ecdsaPublicKey) UnmarshalJSON(data []byte) error {
	v.mu.Lock()
	defer v.mu.Unlock()
	v.algorithm = nil
	v.keyID = nil
	v.keyOps = nil
	v.keyUsage = nil
	v.x509CertChain = nil
	v.x509CertThumbprint = nil
	v.x509CertThumbprintS256 = nil
	v.x509URL = nil
	v.crv = nil
	v.x = nil
	v.y = nil

	dec := json.NewDecoder(bytes.NewReader(data))
	var extra map[string]interface{}

LOOP:
	for {
		tok, err := dec.Token()
		if err != nil {
			return fmt.Errorf(`error reading JSON token: %w`, err)
		}
		switch tok := tok.(type) {
		case json.Delim:
			if tok == '}' { // end of object
				break LOOP
			}
			// we should only get into this clause at the very beginning, and just once
			if tok != '{' {
				return fmt.Errorf(`expected '{', but got '%c'`, tok)
			}
		case string:
			switch tok {
			case AlgorithmKey:
				var acceptValue interface{}
				if err := dec.Decode(&acceptValue); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, AlgorithmKey, err)
				}
				val, err := jwa.KeyAlgorithmFrom(acceptValue)
				if err != nil {
					return fmt.Errorf(`failed to accept value for %q: %w`, AlgorithmKey, err)
				}
				v.algorithm = &val
			case KeyIDKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, KeyIDKey, err)
				}
				v.keyID = &val
			case KeyOpsKey:
				var val KeyOperationList
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, KeyOpsKey, err)
				}
				v.keyOps = &val
			case KeyTypeKey:
				var val jwa.KeyType
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, KeyTypeKey, err)
				}
				if val != jwa.EC {
					return fmt.Errorf(`field %q must be jwa.EC (got %#v)`, tok, val)
				}
			case KeyUsageKey:
				var val KeyUsageType
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, KeyUsageKey, err)
				}
				v.keyUsage = &val
			case X509CertChainKey:
				var val cert.Chain
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, X509CertChainKey, err)
				}
				v.x509CertChain = &val
			case X509CertThumbprintKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, X509CertThumbprintKey, err)
				}
				v.x509CertThumbprint = &val
			case X509CertThumbprintS256Key:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, X509CertThumbprintS256Key, err)
				}
				v.x509CertThumbprintS256 = &val
			case X509URLKey:
				var val string
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, X509URLKey, err)
				}
				v.x509URL = &val
			case ECDSACrvKey:
				var val jwa.EllipticCurveAlgorithm
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ECDSACrvKey, err)
				}
				v.crv = &val
			case ECDSAXKey:
				var val byteslice.Type
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ECDSAXKey, err)
				}
				v.x = &val
			case ECDSAYKey:
				var val byteslice.Type
				if err := dec.Decode(&val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, ECDSAYKey, err)
				}
				v.y = &val
			default:
				var val interface{}
				if err := v.decodeExtraField(tok, dec, &val); err != nil {
					return fmt.Errorf(`failed to decode value for %q: %w`, tok, err)
				}
				if extra == nil {
					extra = make(map[string]interface{})
				}
				extra[tok] = val
			}
		}
	}
	if v.crv == nil {
		return fmt.Errorf(`required field crv is missing`)
	}
	if v.x == nil {
		return fmt.Errorf(`required field x is missing`)
	}
	if v.y == nil {
		return fmt.Errorf(`required field y is missing`)
	}

	if extra != nil {
		v.extra = extra
	}
	return nil
}
